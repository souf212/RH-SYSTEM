@model IEnumerable<PFA_TEMPLATE.Models.TaskExchange>

@using System.Security.Claims
@using PFA_TEMPLATE.Models
@{
    Layout = "~/Views/Shared/_UserLayout.cshtml";
    ViewData["Title"] = "Echange des taches";
}

<div class="container">
    <h2>@ViewData["Title"]</h2>

    <div class="mb-3">
        <a asp-action="Create" class="btn btn-primary">Request New Exchange</a>
    </div>

    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between">
                <h5>My Exchange Requests</h5>
                <span id="notification-badge" class="badge bg-danger d-none">0</span>
            </div>
        </div>
        <div class="card-body">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Request Date</th>
                                <th>My Task</th>
                                <th>Their Task</th>
                                <th>Employee</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td>@item.RequestDate.ToString("g")</td>
                                    <td>@(item.RequestorTask?.Titre ?? "N/A")</td>
                                    <td>@(item.ReceiverTask?.Titre ?? "N/A")</td>
                                    <td>
                                        @if (item.RequestorId == int.Parse(User.FindFirst(ClaimTypes.NameIdentifier)?.Value))
                                        {
                                            <span>@item.Receiver?.Utilisateur?.NomComplet</span>
                                        }
                                        else
                                        {
                                            <span>@item.Requestor?.Utilisateur?.NomComplet</span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(item.Status)">@item.Status</span>
                                    </td>
                                    <td>
                                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-info">Details</a>
                                        @if (item.Status == TaskExchangeStatus.Pending && item.ReceiverId == int.Parse(User.FindFirst(ClaimTypes.NameIdentifier)?.Value))
                                        {
                                            <form asp-action="Approve" method="post" class="d-inline">
                                                <input type="hidden" name="id" value="@item.Id" />
                                                <button type="submit" class="btn btn-sm btn-success">Approve</button>
                                            </form>
                                            <form asp-action="Reject" method="post" class="d-inline">
                                                <input type="hidden" name="id" value="@item.Id" />
                                                <button type="submit" class="btn btn-sm btn-danger">Reject</button>
                                            </form>
                                        }
                                        @if (item.Status == TaskExchangeStatus.Pending && item.RequestorId == int.Parse(User.FindFirst(ClaimTypes.NameIdentifier)?.Value))
                                        {
                                            <form asp-action="Cancel" method="post" class="d-inline">
                                                <input type="hidden" name="id" value="@item.Id" />
                                                <button type="submit" class="btn btn-sm btn-warning">Cancel</button>
                                            </form>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-info">No task exchange requests found.</div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            function updateNotificationBadge() {
                $.get('@Url.Action("GetUnreadCount", "Notification")', function(data) {
                    if (data.count > 0) {
                        $('#notification-badge').text(data.count).removeClass('d-none');
                    } else {
                        $('#notification-badge').addClass('d-none');
                    }
                });
            }
            updateNotificationBadge();
            setInterval(updateNotificationBadge, 30000);
        });
    </script>
}

@functions {
    public string GetStatusBadgeClass(TaskExchangeStatus status)
    {
        switch (status)
        {
            case TaskExchangeStatus.Pending:
                return "bg-warning text-dark";
            case TaskExchangeStatus.Approved:
                return "bg-success";
            case TaskExchangeStatus.Rejected:
                return "bg-danger";
            case TaskExchangeStatus.Cancelled:
                return "bg-secondary";
            default:
                return "bg-info";
        }
    }
}