@model List<PFA_TEMPLATE.Models.Message>
@{
    ViewData["Title"] = "Chat with " + ViewBag.TargetEmploye.NomComplet;
    Layout = "_UserLayout"; // Adjust this to match your layout
}

<div class="container">
    <div class="row">
        <!-- Employee list sidebar -->
        <div class="col-md-3">
            <h4>Employes</h4>
            <div class="list-group">
                @foreach (var employe in ViewBag.AllEmployes)
                {
                    <a href="@Url.Action("Chat", "Messages", new { employeId = employe.IdEmploye })"
                       class="list-group-item @(employe.IdEmploye == ViewBag.TargetEmploye.IdEmploye ? "active" : "")">
                        @employe.Utilisateur.Nom @employe.Utilisateur.Prenom
                    </a>
                }
            </div>
        </div>

        <!-- Chat window -->
        <div class="col-md-9">
            <div class="card">
                <div class="card-header">
                    Chat with @ViewBag.TargetEmploye.Utilisateur.Nom @ViewBag.TargetEmploye.Utilisateur.Prenom
                </div>
                <div class="card-body">
                    <!-- Message container -->
                    <div id="messageContainer" class="message-container" style="height: 400px; overflow-y: auto;">
                        @foreach (var message in Model)
                        {
                            <div class="message @(message.SenderId == ViewBag.CurrentEmploye.IdEmploye ? "message-sent" : "message-received")">
                                <div class="message-content">
                                    <p>@message.Content</p>
                                    <small>@message.SentAt.ToString("hh:mm tt")</small>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Message form -->
                    <form id="messageForm" class="mt-3">
                        @Html.AntiForgeryToken()
                        <div class="input-group">
                            <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." autocomplete="off">
                            <button style="background-color: #713ce3" type="submit" class="btn btn-primary">Send</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div> 

@section Styles { 
    <link href="~/css/chat.css" rel="stylesheet" asp-append-version="true" />
}
@section Scripts {
    <script src="https://js.pusher.com/7.2/pusher.min.js"></script>
    <script>
        // Basic debugging
        console.log('Chat script loading...');

        // Get DOM elements
        const messageForm = document.getElementById('messageForm');
        const messageInput = document.getElementById('messageInput');
        const messageContainer = document.getElementById('messageContainer');

        // Scroll to bottom of messages on page load
        if (messageContainer) {
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }

        // Get employee IDs
        const currentEmployeId = @Json.Serialize(ViewBag.CurrentEmploye.IdEmploye);
        const targetEmployeId = @Json.Serialize(ViewBag.TargetEmploye.IdEmploye);

        console.log('Current employee ID:', currentEmployeId);
        console.log('Target employee ID:', targetEmployeId);

        // Connect to Pusher
        const pusher = new Pusher('@ViewBag.PusherKey', {
            cluster: '@ViewBag.PusherCluster',
            encrypted: true
        });

        // Determine channel name - consistent regardless of who initiates
        const channelName = currentEmployeId < targetEmployeId
            ? `private-chat-${currentEmployeId}-${targetEmployeId}`
            : `private-chat-${targetEmployeId}-${currentEmployeId}`;

        console.log('Channel name:', channelName);

        // Subscribe to the channel
        const channel = pusher.subscribe(channelName);

        // Listen for new messages
        channel.bind('new-message', function(data) {
            console.log('Received message via Pusher:', data);
            appendMessage(data.message);
        });

        // Function to append a message to the chat UI
        function appendMessage(message) {
                 console.log('Message object to append:', JSON.stringify(message));

        // Check if message has the expected properties
        if (!message || !message.content) {
            console.error('Invalid message object:', message);
            return;
        }
            const isCurrentUser = message.senderId === currentEmployeId;
            console.log('Appending message, current user?', isCurrentUser);

            const messageDiv = document.createElement('div');
            messageDiv.className = isCurrentUser
                ? 'message message-sent'
                : 'message message-received';

            messageDiv.innerHTML = `
                <div class="message-content">
                    <p>${message.content}</p>
                    <small>${new Date(message.sentAt).toLocaleTimeString()}</small>
                </div>
            `;

            messageContainer.appendChild(messageDiv);
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }


                // Check if pusher is connected
        pusher.connection.bind('connected', function() {
            console.log('Connected to Pusher!');
        });

        // Check for connection errors
        pusher.connection.bind('error', function(err) {
            console.error('Pusher connection error:', err);
        });

        // Check if channel subscription is successful
        channel.bind('pusher:subscription_succeeded', function() {
            console.log('Successfully subscribed to channel:', channelName);
        });

        // Check if there's a subscription error
        channel.bind('pusher:subscription_error', function(status) {
            console.error('Pusher subscription error:', status);
        });

        // Function to send a message
        if (messageForm) {
                  messageForm.addEventListener('submit', function(event) {
            event.preventDefault();
            console.log('Form submitted');

            const content = messageInput.value.trim();
            if (!content) return;

            console.log('Sending message:', content);

            // Create a temporary message object to display immediately
            const tempMessage = {
                senderId: currentEmployeId,
                receiverId: targetEmployeId,
                content: content,
                sentAt: new Date().toISOString()
            };

            // Display the message immediately
            appendMessage(tempMessage);
            messageInput.value = '';
            messageInput.focus();

            // Get the anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            // Then send to server for saving
            fetch('/Messages/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({
                    receiverId: targetEmployeId,
                    content: content
                })
            })
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    console.error('Server error:', response.status);
                    return response.text().then(text => {
                        throw new Error(`Server error: ${text}`);
                    });
                }s
                return response.json();
            })
            .then(data => {
                console.log('Message saved successfully:', data);
            })
            .catch(error => {
                console.error('Error sending message:', error);
            });
        });
                 console.log('Event listener attached');
        } 
    </script>
}